{"version":3,"sources":["Actions/index.js","Components/userSearch.js","App.js","serviceWorker.js","Reducers/users.js","Reducers/index.js","index.js"],"names":["fetchUsersRequest","type","fetchUsersSuccess","users","payload","fetchUsersFailure","error","connect","state","userData","user","dispatch","fetchUsers","axios","get","then","response","data","catch","message","a","React","useState","value","number","setNumber","useEffect","word","X","Y","id","toString","split","loading","className","defaultValue","onChange","e","target","onKeyDown","keyCode","replace","console","log","onClick","icon","faSearch","size","style","fontSize","fontFamily","marginTop","map","name","toLowerCase","includes","key","email","address","city","toLocaleLowerCase","App","Boolean","window","location","hostname","match","initialState","action","allReducers","combineReducers","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","myStore","createStore","allReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f87d33de.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchUsers = () => {\r\n    return (dispatch) => {\r\n      dispatch(fetchUsersRequest())\r\n      axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n          // response.data is the users\r\n          const users = response.data\r\n          dispatch(fetchUsersSuccess(users))\r\n        })\r\n        .catch(error => {\r\n          // error.message is the error message\r\n          dispatch(fetchUsersFailure(error.message))\r\n        })\r\n    }\r\n  }\r\n  \r\n  export const fetchUsersRequest = () => {\r\n    return {\r\n      type: 'FETCH_USERS_REQUEST'\r\n    }\r\n  }\r\n  \r\n  export const fetchUsersSuccess = users => {\r\n    return {\r\n        \r\n            type: 'FETCH_USERS_SUCCESS',\r\n            payload: users\r\n      \r\n    \r\n    }\r\n  }\r\n  \r\n  export const fetchUsersFailure = error => {\r\n    return {\r\n      type: 'FETCH_USERS_FAILURE',\r\n      payload: error\r\n    }\r\n  }\r\n\r\n\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchUsers } from '../Actions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faSearch} from '@fortawesome/free-solid-svg-icons';\r\n/* import Fade from 'react-reveal/Fade'; */\r\n\r\n\r\n\r\nfunction UsersContainer ({ userData, fetchUsers }) {\r\n\r\n var a=[\"1\",\"10\"];\r\n \r\n\r\n  const [number, setNumber] = React.useState({\r\n    value: 'all',\r\n  })\r\n \r\n  useEffect(() => {\r\n    \r\n    fetchUsers();\r\n   \r\n  }, [fetchUsers])\r\n\r\n  let X =number.value;\r\n  let Y = 0;\r\n  function KeyPress(e){\r\n    if(e.keyCode === 13){\r\n      \r\n      setNumber({ value: e.target.value.replace(/^0+/, ''), });\r\n      console.log(number)\r\n      }\r\n  }\r\n\r\n  function handleChange(e) {\r\n    X = e.target.value\r\n  }\r\n\r\n  function Validate(){\r\n    setNumber({ value:  X.replace(/^0+/, ''),})\r\n  }\r\n\r\n  function SplitArray(word){\r\n     const words = word.split(\"-\");\r\n     return words;\r\n  }\r\n\r\n\r\n\r\n\r\n   \r\n  let id=number.value;\r\n  a = SplitArray(id.toString());\r\n  \r\n  \r\n\r\n  return userData.loading ? (\r\n <div><br></br>\r\n<div id=\"typing-loader\"></div></div>\r\n  ) : userData.error ? (\r\n    <h2>{userData.error}</h2>\r\n  ) : (\r\n    <div>\r\n        <div className=\"centralize-About\">\r\n  \r\n    \r\n    <label>Search:</label>\r\n    \r\n    <input className=\"inputUsers\" id=\"myInput\" type=\"text\" defaultValue=\"All\"  onChange={handleChange} onKeyDown={KeyPress}  ></input> \r\n    <button className=\"searchButton\" onClick={Validate}><FontAwesomeIcon icon={faSearch} size=\"1x\"  /><span className=\"tooltiptext\">Search</span></button>\r\n    <div>Example of search: \"3-7\",\"All\" and also by name .</div>\r\n   <p style={{fontSize:'3rem', fontFamily: 'Spartan, sans-serif', marginTop:'15px'}}>Find people by Name or ID</p>\r\n    </div>\r\n      <div className=\"boxSearch\">\r\n     \r\n      {userData && \r\n    userData.users &&\r\n    userData.users.map(user =>  {\r\n      if(!a[1]){a[1]=id}\r\n  \r\n\r\n\r\n      if(id.toString() ==='' ){return null} \r\n      \r\n    \r\n        if(user.name.toString().toLowerCase().includes(id.toString().toLowerCase()) || user.id.toString() ===id.toString()){return  <div className=\"searchContent\" key={user.id} id={Y=Y+1}>\r\n       \r\n        <p>{user.id}.<b> {user.name}</b>  with e-mail: {user.email}  and lives in the city: <u>{user.address.city}</u></p>\r\n      </div> } \r\n      \r\n     \r\n    if(id.toString().toLocaleLowerCase() ==='all') {return       <div className=\"searchContent\"  key={user.id} id={Y=Y+1}>\r\n  \r\n      <p>{user.id}.<b> {user.name}</b> with e-mail: {user.email}  and lives in the city: <u>{user.address.city}</u></p>\r\n   \r\n        </div> } \r\n     \r\n        if((a[0].toString()<= user.id && user.id<= a[1].toString()) || (a[0].toString()>= user.id && user.id>= a[1].toString())) {return       <div className=\"searchContent\" key={user.id} id={Y=Y+1}>\r\n \r\n       <p>{user.id}. <b> {user.name}</b> with e-mail: {user.email}  and lives in the city: <u>{user.address.city}</u></p>\r\n     \r\n    </div> } \r\n\r\n      \r\n    else return null; \r\n    }\r\n  \r\n    )\r\n    \r\n    }\r\n   \r\n      </div>\r\n      \r\n      {Y===0 && <h2>Nothing found</h2>}\r\n    </div>\r\n  )\r\n        } \r\n\r\n\r\n    \r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    userData: state.user\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchUsers: () => dispatch(fetchUsers())\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UsersContainer)","import React from 'react';\nimport './App.css';\nimport Search from './Components/userSearch';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    loading: false,\r\n    users: [],\r\n    error: ''\r\n  }\r\n  \r\n  const users = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case 'FETCH_USERS_REQUEST':\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        }\r\n      case 'FETCH_USERS_SUCCESS':\r\n        return {\r\n          loading: false,\r\n          users: action.payload,\r\n          error: ''\r\n        }\r\n      case 'FETCH_USERS_FAILURE':\r\n        return {\r\n          loading: false,\r\n          users: [],\r\n          error: action.payload\r\n        }\r\n      default: return state\r\n    }\r\n  }\r\n  \r\n  export default users;","import users from './users';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n  \r\n    user:users,\r\n    \r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore,applyMiddleware,compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport allReducer from './Reducers';\nimport thunk from 'redux-thunk';\n/* const api = 'https://jsonplaceholder.typicode.com/users'; */\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst myStore = createStore(allReducer,\ncomposeEnhancer(applyMiddleware(thunk)),\n);\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={myStore}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}